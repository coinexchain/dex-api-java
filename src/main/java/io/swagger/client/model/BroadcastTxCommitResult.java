/*
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * BroadcastTxCommitResult
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-26T10:53:15.911+08:00[Asia/Shanghai]")
public class BroadcastTxCommitResult {
  @SerializedName("height")
  private String height = null;

  @SerializedName("txhash")
  private String txhash = null;

  @SerializedName("code")
  private Integer code = null;

  @SerializedName("data")
  private String data = null;

  @SerializedName("raw_log")
  private String rawLog = null;

  @SerializedName("logs")
  private List<Object> logs = null;

  @SerializedName("info")
  private String info = null;

  @SerializedName("gas_wanted")
  private String gasWanted = null;

  @SerializedName("gas_used")
  private String gasUsed = null;

  @SerializedName("events")
  private List<Object> events = null;

  @SerializedName("codespace")
  private String codespace = null;

  @SerializedName("tx")
  private Object tx = null;

  @SerializedName("timestamp")
  private String timestamp = null;

  public BroadcastTxCommitResult height(String height) {
    this.height = height;
    return this;
  }

   /**
   * Get height
   * @return height
  **/
  @Schema(description = "")
  public String getHeight() {
    return height;
  }

  public void setHeight(String height) {
    this.height = height;
  }

  public BroadcastTxCommitResult txhash(String txhash) {
    this.txhash = txhash;
    return this;
  }

   /**
   * Get txhash
   * @return txhash
  **/
  @Schema(description = "")
  public String getTxhash() {
    return txhash;
  }

  public void setTxhash(String txhash) {
    this.txhash = txhash;
  }

  public BroadcastTxCommitResult code(Integer code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @Schema(description = "")
  public Integer getCode() {
    return code;
  }

  public void setCode(Integer code) {
    this.code = code;
  }

  public BroadcastTxCommitResult data(String data) {
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @Schema(description = "")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public BroadcastTxCommitResult rawLog(String rawLog) {
    this.rawLog = rawLog;
    return this;
  }

   /**
   * Get rawLog
   * @return rawLog
  **/
  @Schema(description = "")
  public String getRawLog() {
    return rawLog;
  }

  public void setRawLog(String rawLog) {
    this.rawLog = rawLog;
  }

  public BroadcastTxCommitResult logs(List<Object> logs) {
    this.logs = logs;
    return this;
  }

  public BroadcastTxCommitResult addLogsItem(Object logsItem) {
    if (this.logs == null) {
      this.logs = new ArrayList<Object>();
    }
    this.logs.add(logsItem);
    return this;
  }

   /**
   * Get logs
   * @return logs
  **/
  @Schema(description = "")
  public List<Object> getLogs() {
    return logs;
  }

  public void setLogs(List<Object> logs) {
    this.logs = logs;
  }

  public BroadcastTxCommitResult info(String info) {
    this.info = info;
    return this;
  }

   /**
   * Get info
   * @return info
  **/
  @Schema(description = "")
  public String getInfo() {
    return info;
  }

  public void setInfo(String info) {
    this.info = info;
  }

  public BroadcastTxCommitResult gasWanted(String gasWanted) {
    this.gasWanted = gasWanted;
    return this;
  }

   /**
   * Get gasWanted
   * @return gasWanted
  **/
  @Schema(description = "")
  public String getGasWanted() {
    return gasWanted;
  }

  public void setGasWanted(String gasWanted) {
    this.gasWanted = gasWanted;
  }

  public BroadcastTxCommitResult gasUsed(String gasUsed) {
    this.gasUsed = gasUsed;
    return this;
  }

   /**
   * Get gasUsed
   * @return gasUsed
  **/
  @Schema(description = "")
  public String getGasUsed() {
    return gasUsed;
  }

  public void setGasUsed(String gasUsed) {
    this.gasUsed = gasUsed;
  }

  public BroadcastTxCommitResult events(List<Object> events) {
    this.events = events;
    return this;
  }

  public BroadcastTxCommitResult addEventsItem(Object eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<Object>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @Schema(description = "")
  public List<Object> getEvents() {
    return events;
  }

  public void setEvents(List<Object> events) {
    this.events = events;
  }

  public BroadcastTxCommitResult codespace(String codespace) {
    this.codespace = codespace;
    return this;
  }

   /**
   * Get codespace
   * @return codespace
  **/
  @Schema(description = "")
  public String getCodespace() {
    return codespace;
  }

  public void setCodespace(String codespace) {
    this.codespace = codespace;
  }

  public BroadcastTxCommitResult tx(Object tx) {
    this.tx = tx;
    return this;
  }

   /**
   * Get tx
   * @return tx
  **/
  @Schema(description = "")
  public Object getTx() {
    return tx;
  }

  public void setTx(Object tx) {
    this.tx = tx;
  }

  public BroadcastTxCommitResult timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @Schema(description = "")
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BroadcastTxCommitResult broadcastTxCommitResult = (BroadcastTxCommitResult) o;
    return Objects.equals(this.height, broadcastTxCommitResult.height) &&
        Objects.equals(this.txhash, broadcastTxCommitResult.txhash) &&
        Objects.equals(this.code, broadcastTxCommitResult.code) &&
        Objects.equals(this.data, broadcastTxCommitResult.data) &&
        Objects.equals(this.rawLog, broadcastTxCommitResult.rawLog) &&
        Objects.equals(this.logs, broadcastTxCommitResult.logs) &&
        Objects.equals(this.info, broadcastTxCommitResult.info) &&
        Objects.equals(this.gasWanted, broadcastTxCommitResult.gasWanted) &&
        Objects.equals(this.gasUsed, broadcastTxCommitResult.gasUsed) &&
        Objects.equals(this.events, broadcastTxCommitResult.events) &&
        Objects.equals(this.codespace, broadcastTxCommitResult.codespace) &&
        Objects.equals(this.tx, broadcastTxCommitResult.tx) &&
        Objects.equals(this.timestamp, broadcastTxCommitResult.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(height, txhash, code, data, rawLog, logs, info, gasWanted, gasUsed, events, codespace, tx, timestamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BroadcastTxCommitResult {\n");
    
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    txhash: ").append(toIndentedString(txhash)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    rawLog: ").append(toIndentedString(rawLog)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    gasWanted: ").append(toIndentedString(gasWanted)).append("\n");
    sb.append("    gasUsed: ").append(toIndentedString(gasUsed)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    codespace: ").append(toIndentedString(codespace)).append("\n");
    sb.append("    tx: ").append(toIndentedString(tx)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
