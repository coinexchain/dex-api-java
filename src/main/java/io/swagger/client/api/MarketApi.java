///*
// * CET-Lite for CoinEx Chain
// * A REST interface for state queries, transaction generation and broadcasting.
// *
// * OpenAPI spec version: 3.0
// *
// *
// * NOTE: This class is auto generated by the swagger code generator program.
// * https://github.com/swagger-api/swagger-codegen.git
// * Do not edit the class manually.
// */
//
//
//package io.swagger.client.api;
//
//import io.swagger.client.ApiCallback;
//import io.swagger.client.ApiClient;
//import io.swagger.client.ApiException;
//import io.swagger.client.ApiResponse;
//import io.swagger.client.Configuration;
//import io.swagger.client.Pair;
//import io.swagger.client.ProgressRequestBody;
//import io.swagger.client.ProgressResponseBody;
//
//import com.google.gson.reflect.TypeToken;
//
//import java.io.IOException;
//
//
//import io.swagger.client.model.Info1;
//import io.swagger.client.model.Info2;
//import io.swagger.client.model.InlineResponse20042;
//import io.swagger.client.model.InlineResponse20043;
//import io.swagger.client.model.InlineResponse20044;
//import io.swagger.client.model.InlineResponse20045;
//import io.swagger.client.model.InlineResponse20046;
//import io.swagger.client.model.InlineResponse20047;
//import io.swagger.client.model.OrderInfo;
//import io.swagger.client.model.StdTx;
//
//import java.lang.reflect.Type;
//import java.util.ArrayList;
//import java.util.HashMap;
//import java.util.List;
//import java.util.Map;
//
//public class MarketApi {
//    private ApiClient apiClient;
//
//    public MarketApi() {
//        this(Configuration.getDefaultApiClient());
//    }
//
//    public MarketApi(ApiClient apiClient) {
//        this.apiClient = apiClient;
//    }
//
//    public ApiClient getApiClient() {
//        return apiClient;
//    }
//
//    public void setApiClient(ApiClient apiClient) {
//        this.apiClient = apiClient;
//    }
//
//    /**
//     * Build call for cancelOrder
//     * @param orderInfo cancel order tx (required)
//     * @param progressListener Progress listener
//     * @param progressRequestListener Progress request listener
//     * @return Call to execute
//     * @throws ApiException If fail to serialize the request body object
//     */
//    public com.squareup.okhttp.Call cancelOrderCall(OrderInfo orderInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//        Object localVarPostBody = orderInfo;
//
//        // create path and map variables
//        String localVarPath = "/market/cancel-order";
//
//        List<Pair> localVarQueryParams = new ArrayList<Pair>();
//        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
//
//        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
//
//        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
//
//        final String[] localVarAccepts = {
//            "application/json"
//        };
//        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
//        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);
//
//        final String[] localVarContentTypes = {
//            "application/json"
//        };
//        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
//        localVarHeaderParams.put("Content-Type", localVarContentType);
//
//        if(progressListener != null) {
//            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
//                @Override
//                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
//                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
//                    return originalResponse.newBuilder()
//                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
//                    .build();
//                }
//            });
//        }
//
//        String[] localVarAuthNames = new String[] {  };
//        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
//    }
//
//    @SuppressWarnings("rawtypes")
//    private com.squareup.okhttp.Call cancelOrderValidateBeforeCall(OrderInfo orderInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//
//        // verify the required parameter 'orderInfo' is set
//        if (orderInfo == null) {
//            throw new ApiException("Missing the required parameter 'orderInfo' when calling cancelOrder(Async)");
//        }
//
//
//        com.squareup.okhttp.Call call = cancelOrderCall(orderInfo, progressListener, progressRequestListener);
//        return call;
//
//    }
//
//    /**
//     * Cancel the order
//     *
//     * @param orderInfo cancel order tx (required)
//     * @return StdTx
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public StdTx cancelOrder(OrderInfo orderInfo) throws ApiException {
//        ApiResponse<StdTx> resp = cancelOrderWithHttpInfo(orderInfo);
//        return resp.getData();
//    }
//
//    /**
//     * Cancel the order
//     *
//     * @param orderInfo cancel order tx (required)
//     * @return ApiResponse&lt;StdTx&gt;
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public ApiResponse<StdTx> cancelOrderWithHttpInfo(OrderInfo orderInfo) throws ApiException {
//        com.squareup.okhttp.Call call = cancelOrderValidateBeforeCall(orderInfo, null, null);
//        Type localVarReturnType = new TypeToken<StdTx>(){}.getType();
//        return apiClient.execute(call, localVarReturnType);
//    }
//
//    /**
//     * Cancel the order (asynchronously)
//     *
//     * @param orderInfo cancel order tx (required)
//     * @param callback The callback to be executed when the API call finishes
//     * @return The request call
//     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
//     */
//    public com.squareup.okhttp.Call cancelOrderAsync(OrderInfo orderInfo, final ApiCallback<StdTx> callback) throws ApiException {
//
//        ProgressResponseBody.ProgressListener progressListener = null;
//        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;
//
//        if (callback != null) {
//            progressListener = new ProgressResponseBody.ProgressListener() {
//                @Override
//                public void update(long bytesRead, long contentLength, boolean done) {
//                    callback.onDownloadProgress(bytesRead, contentLength, done);
//                }
//            };
//
//            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
//                @Override
//                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
//                    callback.onUploadProgress(bytesWritten, contentLength, done);
//                }
//            };
//        }
//
//        com.squareup.okhttp.Call call = cancelOrderValidateBeforeCall(orderInfo, progressListener, progressRequestListener);
//        Type localVarReturnType = new TypeToken<StdTx>(){}.getType();
//        apiClient.executeAsync(call, localVarReturnType, callback);
//        return call;
//    }
//    /**
//     * Build call for cancelTradingPair
//     * @param info cancel trading-pair in dex (required)
//     * @param progressListener Progress listener
//     * @param progressRequestListener Progress request listener
//     * @return Call to execute
//     * @throws ApiException If fail to serialize the request body object
//     */
//    public com.squareup.okhttp.Call cancelTradingPairCall(Info2 info, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//        Object localVarPostBody = info;
//
//        // create path and map variables
//        String localVarPath = "/market/cancel-trading-pair";
//
//        List<Pair> localVarQueryParams = new ArrayList<Pair>();
//        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
//
//        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
//
//        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
//
//        final String[] localVarAccepts = {
//            "application/json"
//        };
//        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
//        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);
//
//        final String[] localVarContentTypes = {
//            "application/json"
//        };
//        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
//        localVarHeaderParams.put("Content-Type", localVarContentType);
//
//        if(progressListener != null) {
//            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
//                @Override
//                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
//                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
//                    return originalResponse.newBuilder()
//                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
//                    .build();
//                }
//            });
//        }
//
//        String[] localVarAuthNames = new String[] {  };
//        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
//    }
//
//    @SuppressWarnings("rawtypes")
//    private com.squareup.okhttp.Call cancelTradingPairValidateBeforeCall(Info2 info, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//
//        // verify the required parameter 'info' is set
//        if (info == null) {
//            throw new ApiException("Missing the required parameter 'info' when calling cancelTradingPair(Async)");
//        }
//
//
//        com.squareup.okhttp.Call call = cancelTradingPairCall(info, progressListener, progressRequestListener);
//        return call;
//
//    }
//
//    /**
//     * Cancel the trading-pair
//     *
//     * @param info cancel trading-pair in dex (required)
//     * @return StdTx
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public StdTx cancelTradingPair(Info2 info) throws ApiException {
//        ApiResponse<StdTx> resp = cancelTradingPairWithHttpInfo(info);
//        return resp.getData();
//    }
//
//    /**
//     * Cancel the trading-pair
//     *
//     * @param info cancel trading-pair in dex (required)
//     * @return ApiResponse&lt;StdTx&gt;
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public ApiResponse<StdTx> cancelTradingPairWithHttpInfo(Info2 info) throws ApiException {
//        com.squareup.okhttp.Call call = cancelTradingPairValidateBeforeCall(info, null, null);
//        Type localVarReturnType = new TypeToken<StdTx>(){}.getType();
//        return apiClient.execute(call, localVarReturnType);
//    }
//
//    /**
//     * Cancel the trading-pair (asynchronously)
//     *
//     * @param info cancel trading-pair in dex (required)
//     * @param callback The callback to be executed when the API call finishes
//     * @return The request call
//     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
//     */
//    public com.squareup.okhttp.Call cancelTradingPairAsync(Info2 info, final ApiCallback<StdTx> callback) throws ApiException {
//
//        ProgressResponseBody.ProgressListener progressListener = null;
//        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;
//
//        if (callback != null) {
//            progressListener = new ProgressResponseBody.ProgressListener() {
//                @Override
//                public void update(long bytesRead, long contentLength, boolean done) {
//                    callback.onDownloadProgress(bytesRead, contentLength, done);
//                }
//            };
//
//            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
//                @Override
//                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
//                    callback.onUploadProgress(bytesWritten, contentLength, done);
//                }
//            };
//        }
//
//        com.squareup.okhttp.Call call = cancelTradingPairValidateBeforeCall(info, progressListener, progressRequestListener);
//        Type localVarReturnType = new TypeToken<StdTx>(){}.getType();
//        apiClient.executeAsync(call, localVarReturnType, callback);
//        return call;
//    }
//    /**
//     * Build call for createGteOrder
//     * @param orderInfo create order tx (required)
//     * @param progressListener Progress listener
//     * @param progressRequestListener Progress request listener
//     * @return Call to execute
//     * @throws ApiException If fail to serialize the request body object
//     */
//    public com.squareup.okhttp.Call createGteOrderCall(object orderInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//        Object localVarPostBody = orderInfo;
//
//        // create path and map variables
//        String localVarPath = "/market/gte-orders";
//
//        List<Pair> localVarQueryParams = new ArrayList<Pair>();
//        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
//
//        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
//
//        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
//
//        final String[] localVarAccepts = {
//            "application/json"
//        };
//        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
//        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);
//
//        final String[] localVarContentTypes = {
//            "application/json"
//        };
//        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
//        localVarHeaderParams.put("Content-Type", localVarContentType);
//
//        if(progressListener != null) {
//            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
//                @Override
//                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
//                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
//                    return originalResponse.newBuilder()
//                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
//                    .build();
//                }
//            });
//        }
//
//        String[] localVarAuthNames = new String[] {  };
//        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
//    }
//
//    @SuppressWarnings("rawtypes")
//    private com.squareup.okhttp.Call createGteOrderValidateBeforeCall(object orderInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//
//        // verify the required parameter 'orderInfo' is set
//        if (orderInfo == null) {
//            throw new ApiException("Missing the required parameter 'orderInfo' when calling createGteOrder(Async)");
//        }
//
//
//        com.squareup.okhttp.Call call = createGteOrderCall(orderInfo, progressListener, progressRequestListener);
//        return call;
//
//    }
//
//    /**
//     * Create GTE order in blockchain
//     *
//     * @param orderInfo create order tx (required)
//     * @return StdTx
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public StdTx createGteOrder(object orderInfo) throws ApiException {
//        ApiResponse<StdTx> resp = createGteOrderWithHttpInfo(orderInfo);
//        return resp.getData();
//    }
//
//    /**
//     * Create GTE order in blockchain
//     *
//     * @param orderInfo create order tx (required)
//     * @return ApiResponse&lt;StdTx&gt;
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public ApiResponse<StdTx> createGteOrderWithHttpInfo(object orderInfo) throws ApiException {
//        com.squareup.okhttp.Call call = createGteOrderValidateBeforeCall(orderInfo, null, null);
//        Type localVarReturnType = new TypeToken<StdTx>(){}.getType();
//        return apiClient.execute(call, localVarReturnType);
//    }
//
//    /**
//     * Create GTE order in blockchain (asynchronously)
//     *
//     * @param orderInfo create order tx (required)
//     * @param callback The callback to be executed when the API call finishes
//     * @return The request call
//     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
//     */
//    public com.squareup.okhttp.Call createGteOrderAsync(object orderInfo, final ApiCallback<StdTx> callback) throws ApiException {
//
//        ProgressResponseBody.ProgressListener progressListener = null;
//        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;
//
//        if (callback != null) {
//            progressListener = new ProgressResponseBody.ProgressListener() {
//                @Override
//                public void update(long bytesRead, long contentLength, boolean done) {
//                    callback.onDownloadProgress(bytesRead, contentLength, done);
//                }
//            };
//
//            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
//                @Override
//                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
//                    callback.onUploadProgress(bytesWritten, contentLength, done);
//                }
//            };
//        }
//
//        com.squareup.okhttp.Call call = createGteOrderValidateBeforeCall(orderInfo, progressListener, progressRequestListener);
//        Type localVarReturnType = new TypeToken<StdTx>(){}.getType();
//        apiClient.executeAsync(call, localVarReturnType, callback);
//        return call;
//    }
//    /**
//     * Build call for createIocOrder
//     * @param orderInfo create order tx (required)
//     * @param progressListener Progress listener
//     * @param progressRequestListener Progress request listener
//     * @return Call to execute
//     * @throws ApiException If fail to serialize the request body object
//     */
//    public com.squareup.okhttp.Call createIocOrderCall(object orderInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//        Object localVarPostBody = orderInfo;
//
//        // create path and map variables
//        String localVarPath = "/market/ioc-orders";
//
//        List<Pair> localVarQueryParams = new ArrayList<Pair>();
//        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
//
//        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
//
//        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
//
//        final String[] localVarAccepts = {
//            "application/json"
//        };
//        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
//        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);
//
//        final String[] localVarContentTypes = {
//            "application/json"
//        };
//        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
//        localVarHeaderParams.put("Content-Type", localVarContentType);
//
//        if(progressListener != null) {
//            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
//                @Override
//                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
//                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
//                    return originalResponse.newBuilder()
//                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
//                    .build();
//                }
//            });
//        }
//
//        String[] localVarAuthNames = new String[] {  };
//        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
//    }
//
//    @SuppressWarnings("rawtypes")
//    private com.squareup.okhttp.Call createIocOrderValidateBeforeCall(object orderInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//
//        // verify the required parameter 'orderInfo' is set
//        if (orderInfo == null) {
//            throw new ApiException("Missing the required parameter 'orderInfo' when calling createIocOrder(Async)");
//        }
//
//
//        com.squareup.okhttp.Call call = createIocOrderCall(orderInfo, progressListener, progressRequestListener);
//        return call;
//
//    }
//
//    /**
//     * Create IOC order in blockchain
//     *
//     * @param orderInfo create order tx (required)
//     * @return StdTx
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public StdTx createIocOrder(object orderInfo) throws ApiException {
//        ApiResponse<StdTx> resp = createIocOrderWithHttpInfo(orderInfo);
//        return resp.getData();
//    }
//
//    /**
//     * Create IOC order in blockchain
//     *
//     * @param orderInfo create order tx (required)
//     * @return ApiResponse&lt;StdTx&gt;
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public ApiResponse<StdTx> createIocOrderWithHttpInfo(object orderInfo) throws ApiException {
//        com.squareup.okhttp.Call call = createIocOrderValidateBeforeCall(orderInfo, null, null);
//        Type localVarReturnType = new TypeToken<StdTx>(){}.getType();
//        return apiClient.execute(call, localVarReturnType);
//    }
//
//    /**
//     * Create IOC order in blockchain (asynchronously)
//     *
//     * @param orderInfo create order tx (required)
//     * @param callback The callback to be executed when the API call finishes
//     * @return The request call
//     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
//     */
//    public com.squareup.okhttp.Call createIocOrderAsync(object orderInfo, final ApiCallback<StdTx> callback) throws ApiException {
//
//        ProgressResponseBody.ProgressListener progressListener = null;
//        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;
//
//        if (callback != null) {
//            progressListener = new ProgressResponseBody.ProgressListener() {
//                @Override
//                public void update(long bytesRead, long contentLength, boolean done) {
//                    callback.onDownloadProgress(bytesRead, contentLength, done);
//                }
//            };
//
//            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
//                @Override
//                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
//                    callback.onUploadProgress(bytesWritten, contentLength, done);
//                }
//            };
//        }
//
//        com.squareup.okhttp.Call call = createIocOrderValidateBeforeCall(orderInfo, progressListener, progressRequestListener);
//        Type localVarReturnType = new TypeToken<StdTx>(){}.getType();
//        apiClient.executeAsync(call, localVarReturnType, callback);
//        return call;
//    }
//    /**
//     * Build call for createTradingPair
//     * @param info Create trading-pair (required)
//     * @param progressListener Progress listener
//     * @param progressRequestListener Progress request listener
//     * @return Call to execute
//     * @throws ApiException If fail to serialize the request body object
//     */
//    public com.squareup.okhttp.Call createTradingPairCall(object info, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//        Object localVarPostBody = info;
//
//        // create path and map variables
//        String localVarPath = "/market/trading-pairs";
//
//        List<Pair> localVarQueryParams = new ArrayList<Pair>();
//        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
//
//        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
//
//        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
//
//        final String[] localVarAccepts = {
//            "application/json"
//        };
//        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
//        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);
//
//        final String[] localVarContentTypes = {
//            "application/json"
//        };
//        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
//        localVarHeaderParams.put("Content-Type", localVarContentType);
//
//        if(progressListener != null) {
//            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
//                @Override
//                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
//                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
//                    return originalResponse.newBuilder()
//                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
//                    .build();
//                }
//            });
//        }
//
//        String[] localVarAuthNames = new String[] {  };
//        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
//    }
//
//    @SuppressWarnings("rawtypes")
//    private com.squareup.okhttp.Call createTradingPairValidateBeforeCall(object info, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//
//        // verify the required parameter 'info' is set
//        if (info == null) {
//            throw new ApiException("Missing the required parameter 'info' when calling createTradingPair(Async)");
//        }
//
//
//        com.squareup.okhttp.Call call = createTradingPairCall(info, progressListener, progressRequestListener);
//        return call;
//
//    }
//
//    /**
//     * Create trading-pair in blockchain
//     *
//     * @param info Create trading-pair (required)
//     * @return StdTx
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public StdTx createTradingPair(object info) throws ApiException {
//        ApiResponse<StdTx> resp = createTradingPairWithHttpInfo(info);
//        return resp.getData();
//    }
//
//    /**
//     * Create trading-pair in blockchain
//     *
//     * @param info Create trading-pair (required)
//     * @return ApiResponse&lt;StdTx&gt;
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public ApiResponse<StdTx> createTradingPairWithHttpInfo(object info) throws ApiException {
//        com.squareup.okhttp.Call call = createTradingPairValidateBeforeCall(info, null, null);
//        Type localVarReturnType = new TypeToken<StdTx>(){}.getType();
//        return apiClient.execute(call, localVarReturnType);
//    }
//
//    /**
//     * Create trading-pair in blockchain (asynchronously)
//     *
//     * @param info Create trading-pair (required)
//     * @param callback The callback to be executed when the API call finishes
//     * @return The request call
//     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
//     */
//    public com.squareup.okhttp.Call createTradingPairAsync(object info, final ApiCallback<StdTx> callback) throws ApiException {
//
//        ProgressResponseBody.ProgressListener progressListener = null;
//        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;
//
//        if (callback != null) {
//            progressListener = new ProgressResponseBody.ProgressListener() {
//                @Override
//                public void update(long bytesRead, long contentLength, boolean done) {
//                    callback.onDownloadProgress(bytesRead, contentLength, done);
//                }
//            };
//
//            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
//                @Override
//                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
//                    callback.onUploadProgress(bytesWritten, contentLength, done);
//                }
//            };
//        }
//
//        com.squareup.okhttp.Call call = createTradingPairValidateBeforeCall(info, progressListener, progressRequestListener);
//        Type localVarReturnType = new TypeToken<StdTx>(){}.getType();
//        apiClient.executeAsync(call, localVarReturnType, callback);
//        return call;
//    }
//    /**
//     * Build call for getMarketParams
//     * @param progressListener Progress listener
//     * @param progressRequestListener Progress request listener
//     * @return Call to execute
//     * @throws ApiException If fail to serialize the request body object
//     */
//    public com.squareup.okhttp.Call getMarketParamsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//        Object localVarPostBody = null;
//
//        // create path and map variables
//        String localVarPath = "/market/parameters";
//
//        List<Pair> localVarQueryParams = new ArrayList<Pair>();
//        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
//
//        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
//
//        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
//
//        final String[] localVarAccepts = {
//            "application/json"
//        };
//        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
//        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);
//
//        final String[] localVarContentTypes = {
//
//        };
//        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
//        localVarHeaderParams.put("Content-Type", localVarContentType);
//
//        if(progressListener != null) {
//            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
//                @Override
//                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
//                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
//                    return originalResponse.newBuilder()
//                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
//                    .build();
//                }
//            });
//        }
//
//        String[] localVarAuthNames = new String[] {  };
//        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
//    }
//
//    @SuppressWarnings("rawtypes")
//    private com.squareup.okhttp.Call getMarketParamsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//
//
//        com.squareup.okhttp.Call call = getMarketParamsCall(progressListener, progressRequestListener);
//        return call;
//
//    }
//
//    /**
//     * Get the current market parameters
//     *
//     * @return InlineResponse20042
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public InlineResponse20042 getMarketParams() throws ApiException {
//        ApiResponse<InlineResponse20042> resp = getMarketParamsWithHttpInfo();
//        return resp.getData();
//    }
//
//    /**
//     * Get the current market parameters
//     *
//     * @return ApiResponse&lt;InlineResponse20042&gt;
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public ApiResponse<InlineResponse20042> getMarketParamsWithHttpInfo() throws ApiException {
//        com.squareup.okhttp.Call call = getMarketParamsValidateBeforeCall(null, null);
//        Type localVarReturnType = new TypeToken<InlineResponse20042>(){}.getType();
//        return apiClient.execute(call, localVarReturnType);
//    }
//
//    /**
//     * Get the current market parameters (asynchronously)
//     *
//     * @param callback The callback to be executed when the API call finishes
//     * @return The request call
//     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
//     */
//    public com.squareup.okhttp.Call getMarketParamsAsync(final ApiCallback<InlineResponse20042> callback) throws ApiException {
//
//        ProgressResponseBody.ProgressListener progressListener = null;
//        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;
//
//        if (callback != null) {
//            progressListener = new ProgressResponseBody.ProgressListener() {
//                @Override
//                public void update(long bytesRead, long contentLength, boolean done) {
//                    callback.onDownloadProgress(bytesRead, contentLength, done);
//                }
//            };
//
//            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
//                @Override
//                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
//                    callback.onUploadProgress(bytesWritten, contentLength, done);
//                }
//            };
//        }
//
//        com.squareup.okhttp.Call call = getMarketParamsValidateBeforeCall(progressListener, progressRequestListener);
//        Type localVarReturnType = new TypeToken<InlineResponse20042>(){}.getType();
//        apiClient.executeAsync(call, localVarReturnType, callback);
//        return call;
//    }
//    /**
//     * Build call for getOrder
//     * @param orderId The order id (required)
//     * @param progressListener Progress listener
//     * @param progressRequestListener Progress request listener
//     * @return Call to execute
//     * @throws ApiException If fail to serialize the request body object
//     */
//    public com.squareup.okhttp.Call getOrderCall(String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//        Object localVarPostBody = null;
//
//        // create path and map variables
//        String localVarPath = "/market/orders/{order-id}"
//            .replaceAll("\\{" + "order-id" + "\\}", apiClient.escapeString(orderId.toString()));
//
//        List<Pair> localVarQueryParams = new ArrayList<Pair>();
//        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
//
//        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
//
//        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
//
//        final String[] localVarAccepts = {
//            "application/json"
//        };
//        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
//        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);
//
//        final String[] localVarContentTypes = {
//
//        };
//        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
//        localVarHeaderParams.put("Content-Type", localVarContentType);
//
//        if(progressListener != null) {
//            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
//                @Override
//                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
//                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
//                    return originalResponse.newBuilder()
//                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
//                    .build();
//                }
//            });
//        }
//
//        String[] localVarAuthNames = new String[] {  };
//        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
//    }
//
//    @SuppressWarnings("rawtypes")
//    private com.squareup.okhttp.Call getOrderValidateBeforeCall(String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//
//        // verify the required parameter 'orderId' is set
//        if (orderId == null) {
//            throw new ApiException("Missing the required parameter 'orderId' when calling getOrder(Async)");
//        }
//
//
//        com.squareup.okhttp.Call call = getOrderCall(orderId, progressListener, progressRequestListener);
//        return call;
//
//    }
//
//    /**
//     * Query order info
//     *
//     * @param orderId The order id (required)
//     * @return InlineResponse20046
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public InlineResponse20046 getOrder(String orderId) throws ApiException {
//        ApiResponse<InlineResponse20046> resp = getOrderWithHttpInfo(orderId);
//        return resp.getData();
//    }
//
//    /**
//     * Query order info
//     *
//     * @param orderId The order id (required)
//     * @return ApiResponse&lt;InlineResponse20046&gt;
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public ApiResponse<InlineResponse20046> getOrderWithHttpInfo(String orderId) throws ApiException {
//        com.squareup.okhttp.Call call = getOrderValidateBeforeCall(orderId, null, null);
//        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
//        return apiClient.execute(call, localVarReturnType);
//    }
//
//    /**
//     * Query order info (asynchronously)
//     *
//     * @param orderId The order id (required)
//     * @param callback The callback to be executed when the API call finishes
//     * @return The request call
//     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
//     */
//    public com.squareup.okhttp.Call getOrderAsync(String orderId, final ApiCallback<InlineResponse20046> callback) throws ApiException {
//
//        ProgressResponseBody.ProgressListener progressListener = null;
//        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;
//
//        if (callback != null) {
//            progressListener = new ProgressResponseBody.ProgressListener() {
//                @Override
//                public void update(long bytesRead, long contentLength, boolean done) {
//                    callback.onDownloadProgress(bytesRead, contentLength, done);
//                }
//            };
//
//            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
//                @Override
//                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
//                    callback.onUploadProgress(bytesWritten, contentLength, done);
//                }
//            };
//        }
//
//        com.squareup.okhttp.Call call = getOrderValidateBeforeCall(orderId, progressListener, progressRequestListener);
//        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
//        apiClient.executeAsync(call, localVarReturnType, callback);
//        return call;
//    }
//    /**
//     * Build call for getOrders
//     * @param address The user address (required)
//     * @param progressListener Progress listener
//     * @param progressRequestListener Progress request listener
//     * @return Call to execute
//     * @throws ApiException If fail to serialize the request body object
//     */
//    public com.squareup.okhttp.Call getOrdersCall(String address, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//        Object localVarPostBody = null;
//
//        // create path and map variables
//        String localVarPath = "/market/orders/account/{address}"
//            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));
//
//        List<Pair> localVarQueryParams = new ArrayList<Pair>();
//        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
//
//        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
//
//        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
//
//        final String[] localVarAccepts = {
//            "application/json"
//        };
//        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
//        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);
//
//        final String[] localVarContentTypes = {
//
//        };
//        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
//        localVarHeaderParams.put("Content-Type", localVarContentType);
//
//        if(progressListener != null) {
//            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
//                @Override
//                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
//                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
//                    return originalResponse.newBuilder()
//                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
//                    .build();
//                }
//            });
//        }
//
//        String[] localVarAuthNames = new String[] {  };
//        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
//    }
//
//    @SuppressWarnings("rawtypes")
//    private com.squareup.okhttp.Call getOrdersValidateBeforeCall(String address, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//
//        // verify the required parameter 'address' is set
//        if (address == null) {
//            throw new ApiException("Missing the required parameter 'address' when calling getOrders(Async)");
//        }
//
//
//        com.squareup.okhttp.Call call = getOrdersCall(address, progressListener, progressRequestListener);
//        return call;
//
//    }
//
//    /**
//     * Query user order-id list
//     *
//     * @param address The user address (required)
//     * @return InlineResponse20047
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public InlineResponse20047 getOrders(String address) throws ApiException {
//        ApiResponse<InlineResponse20047> resp = getOrdersWithHttpInfo(address);
//        return resp.getData();
//    }
//
//    /**
//     * Query user order-id list
//     *
//     * @param address The user address (required)
//     * @return ApiResponse&lt;InlineResponse20047&gt;
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public ApiResponse<InlineResponse20047> getOrdersWithHttpInfo(String address) throws ApiException {
//        com.squareup.okhttp.Call call = getOrdersValidateBeforeCall(address, null, null);
//        Type localVarReturnType = new TypeToken<InlineResponse20047>(){}.getType();
//        return apiClient.execute(call, localVarReturnType);
//    }
//
//    /**
//     * Query user order-id list (asynchronously)
//     *
//     * @param address The user address (required)
//     * @param callback The callback to be executed when the API call finishes
//     * @return The request call
//     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
//     */
//    public com.squareup.okhttp.Call getOrdersAsync(String address, final ApiCallback<InlineResponse20047> callback) throws ApiException {
//
//        ProgressResponseBody.ProgressListener progressListener = null;
//        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;
//
//        if (callback != null) {
//            progressListener = new ProgressResponseBody.ProgressListener() {
//                @Override
//                public void update(long bytesRead, long contentLength, boolean done) {
//                    callback.onDownloadProgress(bytesRead, contentLength, done);
//                }
//            };
//
//            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
//                @Override
//                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
//                    callback.onUploadProgress(bytesWritten, contentLength, done);
//                }
//            };
//        }
//
//        com.squareup.okhttp.Call call = getOrdersValidateBeforeCall(address, progressListener, progressRequestListener);
//        Type localVarReturnType = new TypeToken<InlineResponse20047>(){}.getType();
//        apiClient.executeAsync(call, localVarReturnType, callback);
//        return call;
//    }
//    /**
//     * Build call for getOrdersInMarket
//     * @param stock stock symbol (required)
//     * @param money money symbol (required)
//     * @param progressListener Progress listener
//     * @param progressRequestListener Progress request listener
//     * @return Call to execute
//     * @throws ApiException If fail to serialize the request body object
//     */
//    public com.squareup.okhttp.Call getOrdersInMarketCall(String stock, String money, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//        Object localVarPostBody = null;
//
//        // create path and map variables
//        String localVarPath = "/market/orderbook/{stock}/{money}"
//            .replaceAll("\\{" + "stock" + "\\}", apiClient.escapeString(stock.toString()))
//            .replaceAll("\\{" + "money" + "\\}", apiClient.escapeString(money.toString()));
//
//        List<Pair> localVarQueryParams = new ArrayList<Pair>();
//        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
//
//        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
//
//        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
//
//        final String[] localVarAccepts = {
//            "application/json"
//        };
//        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
//        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);
//
//        final String[] localVarContentTypes = {
//
//        };
//        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
//        localVarHeaderParams.put("Content-Type", localVarContentType);
//
//        if(progressListener != null) {
//            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
//                @Override
//                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
//                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
//                    return originalResponse.newBuilder()
//                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
//                    .build();
//                }
//            });
//        }
//
//        String[] localVarAuthNames = new String[] {  };
//        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
//    }
//
//    @SuppressWarnings("rawtypes")
//    private com.squareup.okhttp.Call getOrdersInMarketValidateBeforeCall(String stock, String money, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//
//        // verify the required parameter 'stock' is set
//        if (stock == null) {
//            throw new ApiException("Missing the required parameter 'stock' when calling getOrdersInMarket(Async)");
//        }
//
//        // verify the required parameter 'money' is set
//        if (money == null) {
//            throw new ApiException("Missing the required parameter 'money' when calling getOrdersInMarket(Async)");
//        }
//
//
//        com.squareup.okhttp.Call call = getOrdersInMarketCall(stock, money, progressListener, progressRequestListener);
//        return call;
//
//    }
//
//    /**
//     * Query trading-pair&#39;s orderbook
//     *
//     * @param stock stock symbol (required)
//     * @param money money symbol (required)
//     * @return InlineResponse20045
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public InlineResponse20045 getOrdersInMarket(String stock, String money) throws ApiException {
//        ApiResponse<InlineResponse20045> resp = getOrdersInMarketWithHttpInfo(stock, money);
//        return resp.getData();
//    }
//
//    /**
//     * Query trading-pair&#39;s orderbook
//     *
//     * @param stock stock symbol (required)
//     * @param money money symbol (required)
//     * @return ApiResponse&lt;InlineResponse20045&gt;
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public ApiResponse<InlineResponse20045> getOrdersInMarketWithHttpInfo(String stock, String money) throws ApiException {
//        com.squareup.okhttp.Call call = getOrdersInMarketValidateBeforeCall(stock, money, null, null);
//        Type localVarReturnType = new TypeToken<InlineResponse20045>(){}.getType();
//        return apiClient.execute(call, localVarReturnType);
//    }
//
//    /**
//     * Query trading-pair&#39;s orderbook (asynchronously)
//     *
//     * @param stock stock symbol (required)
//     * @param money money symbol (required)
//     * @param callback The callback to be executed when the API call finishes
//     * @return The request call
//     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
//     */
//    public com.squareup.okhttp.Call getOrdersInMarketAsync(String stock, String money, final ApiCallback<InlineResponse20045> callback) throws ApiException {
//
//        ProgressResponseBody.ProgressListener progressListener = null;
//        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;
//
//        if (callback != null) {
//            progressListener = new ProgressResponseBody.ProgressListener() {
//                @Override
//                public void update(long bytesRead, long contentLength, boolean done) {
//                    callback.onDownloadProgress(bytesRead, contentLength, done);
//                }
//            };
//
//            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
//                @Override
//                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
//                    callback.onUploadProgress(bytesWritten, contentLength, done);
//                }
//            };
//        }
//
//        com.squareup.okhttp.Call call = getOrdersInMarketValidateBeforeCall(stock, money, progressListener, progressRequestListener);
//        Type localVarReturnType = new TypeToken<InlineResponse20045>(){}.getType();
//        apiClient.executeAsync(call, localVarReturnType, callback);
//        return call;
//    }
//    /**
//     * Build call for getTradingPair
//     * @param stock stock symbol (required)
//     * @param money money symbol (required)
//     * @param progressListener Progress listener
//     * @param progressRequestListener Progress request listener
//     * @return Call to execute
//     * @throws ApiException If fail to serialize the request body object
//     */
//    public com.squareup.okhttp.Call getTradingPairCall(String stock, String money, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//        Object localVarPostBody = null;
//
//        // create path and map variables
//        String localVarPath = "/market/trading-pairs/{stock}/{money}"
//            .replaceAll("\\{" + "stock" + "\\}", apiClient.escapeString(stock.toString()))
//            .replaceAll("\\{" + "money" + "\\}", apiClient.escapeString(money.toString()));
//
//        List<Pair> localVarQueryParams = new ArrayList<Pair>();
//        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
//
//        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
//
//        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
//
//        final String[] localVarAccepts = {
//            "application/json"
//        };
//        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
//        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);
//
//        final String[] localVarContentTypes = {
//
//        };
//        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
//        localVarHeaderParams.put("Content-Type", localVarContentType);
//
//        if(progressListener != null) {
//            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
//                @Override
//                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
//                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
//                    return originalResponse.newBuilder()
//                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
//                    .build();
//                }
//            });
//        }
//
//        String[] localVarAuthNames = new String[] {  };
//        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
//    }
//
//    @SuppressWarnings("rawtypes")
//    private com.squareup.okhttp.Call getTradingPairValidateBeforeCall(String stock, String money, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//
//        // verify the required parameter 'stock' is set
//        if (stock == null) {
//            throw new ApiException("Missing the required parameter 'stock' when calling getTradingPair(Async)");
//        }
//
//        // verify the required parameter 'money' is set
//        if (money == null) {
//            throw new ApiException("Missing the required parameter 'money' when calling getTradingPair(Async)");
//        }
//
//
//        com.squareup.okhttp.Call call = getTradingPairCall(stock, money, progressListener, progressRequestListener);
//        return call;
//
//    }
//
//    /**
//     * Query trading-pair info
//     *
//     * @param stock stock symbol (required)
//     * @param money money symbol (required)
//     * @return InlineResponse20044
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public InlineResponse20044 getTradingPair(String stock, String money) throws ApiException {
//        ApiResponse<InlineResponse20044> resp = getTradingPairWithHttpInfo(stock, money);
//        return resp.getData();
//    }
//
//    /**
//     * Query trading-pair info
//     *
//     * @param stock stock symbol (required)
//     * @param money money symbol (required)
//     * @return ApiResponse&lt;InlineResponse20044&gt;
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public ApiResponse<InlineResponse20044> getTradingPairWithHttpInfo(String stock, String money) throws ApiException {
//        com.squareup.okhttp.Call call = getTradingPairValidateBeforeCall(stock, money, null, null);
//        Type localVarReturnType = new TypeToken<InlineResponse20044>(){}.getType();
//        return apiClient.execute(call, localVarReturnType);
//    }
//
//    /**
//     * Query trading-pair info (asynchronously)
//     *
//     * @param stock stock symbol (required)
//     * @param money money symbol (required)
//     * @param callback The callback to be executed when the API call finishes
//     * @return The request call
//     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
//     */
//    public com.squareup.okhttp.Call getTradingPairAsync(String stock, String money, final ApiCallback<InlineResponse20044> callback) throws ApiException {
//
//        ProgressResponseBody.ProgressListener progressListener = null;
//        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;
//
//        if (callback != null) {
//            progressListener = new ProgressResponseBody.ProgressListener() {
//                @Override
//                public void update(long bytesRead, long contentLength, boolean done) {
//                    callback.onDownloadProgress(bytesRead, contentLength, done);
//                }
//            };
//
//            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
//                @Override
//                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
//                    callback.onUploadProgress(bytesWritten, contentLength, done);
//                }
//            };
//        }
//
//        com.squareup.okhttp.Call call = getTradingPairValidateBeforeCall(stock, money, progressListener, progressRequestListener);
//        Type localVarReturnType = new TypeToken<InlineResponse20044>(){}.getType();
//        apiClient.executeAsync(call, localVarReturnType, callback);
//        return call;
//    }
//    /**
//     * Build call for modifyPricePrecision
//     * @param info trading-pair, price-precision as params (required)
//     * @param progressListener Progress listener
//     * @param progressRequestListener Progress request listener
//     * @return Call to execute
//     * @throws ApiException If fail to serialize the request body object
//     */
//    public com.squareup.okhttp.Call modifyPricePrecisionCall(Info1 info, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//        Object localVarPostBody = info;
//
//        // create path and map variables
//        String localVarPath = "/market/price-precision";
//
//        List<Pair> localVarQueryParams = new ArrayList<Pair>();
//        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
//
//        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
//
//        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
//
//        final String[] localVarAccepts = {
//            "application/json"
//        };
//        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
//        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);
//
//        final String[] localVarContentTypes = {
//            "application/json"
//        };
//        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
//        localVarHeaderParams.put("Content-Type", localVarContentType);
//
//        if(progressListener != null) {
//            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
//                @Override
//                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
//                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
//                    return originalResponse.newBuilder()
//                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
//                    .build();
//                }
//            });
//        }
//
//        String[] localVarAuthNames = new String[] {  };
//        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
//    }
//
//    @SuppressWarnings("rawtypes")
//    private com.squareup.okhttp.Call modifyPricePrecisionValidateBeforeCall(Info1 info, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//
//        // verify the required parameter 'info' is set
//        if (info == null) {
//            throw new ApiException("Missing the required parameter 'info' when calling modifyPricePrecision(Async)");
//        }
//
//
//        com.squareup.okhttp.Call call = modifyPricePrecisionCall(info, progressListener, progressRequestListener);
//        return call;
//
//    }
//
//    /**
//     * Modify the price precision of the trading pair in the dex
//     *
//     * @param info trading-pair, price-precision as params (required)
//     * @return StdTx
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public StdTx modifyPricePrecision(Info1 info) throws ApiException {
//        ApiResponse<StdTx> resp = modifyPricePrecisionWithHttpInfo(info);
//        return resp.getData();
//    }
//
//    /**
//     * Modify the price precision of the trading pair in the dex
//     *
//     * @param info trading-pair, price-precision as params (required)
//     * @return ApiResponse&lt;StdTx&gt;
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public ApiResponse<StdTx> modifyPricePrecisionWithHttpInfo(Info1 info) throws ApiException {
//        com.squareup.okhttp.Call call = modifyPricePrecisionValidateBeforeCall(info, null, null);
//        Type localVarReturnType = new TypeToken<StdTx>(){}.getType();
//        return apiClient.execute(call, localVarReturnType);
//    }
//
//    /**
//     * Modify the price precision of the trading pair in the dex (asynchronously)
//     *
//     * @param info trading-pair, price-precision as params (required)
//     * @param callback The callback to be executed when the API call finishes
//     * @return The request call
//     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
//     */
//    public com.squareup.okhttp.Call modifyPricePrecisionAsync(Info1 info, final ApiCallback<StdTx> callback) throws ApiException {
//
//        ProgressResponseBody.ProgressListener progressListener = null;
//        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;
//
//        if (callback != null) {
//            progressListener = new ProgressResponseBody.ProgressListener() {
//                @Override
//                public void update(long bytesRead, long contentLength, boolean done) {
//                    callback.onDownloadProgress(bytesRead, contentLength, done);
//                }
//            };
//
//            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
//                @Override
//                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
//                    callback.onUploadProgress(bytesWritten, contentLength, done);
//                }
//            };
//        }
//
//        com.squareup.okhttp.Call call = modifyPricePrecisionValidateBeforeCall(info, progressListener, progressRequestListener);
//        Type localVarReturnType = new TypeToken<StdTx>(){}.getType();
//        apiClient.executeAsync(call, localVarReturnType, callback);
//        return call;
//    }
//    /**
//     * Build call for queryTradingPairs
//     * @param progressListener Progress listener
//     * @param progressRequestListener Progress request listener
//     * @return Call to execute
//     * @throws ApiException If fail to serialize the request body object
//     */
//    public com.squareup.okhttp.Call queryTradingPairsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//        Object localVarPostBody = null;
//
//        // create path and map variables
//        String localVarPath = "/market/exist-trading-pairs";
//
//        List<Pair> localVarQueryParams = new ArrayList<Pair>();
//        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
//
//        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
//
//        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
//
//        final String[] localVarAccepts = {
//            "application/json"
//        };
//        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
//        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);
//
//        final String[] localVarContentTypes = {
//            "application/json"
//        };
//        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
//        localVarHeaderParams.put("Content-Type", localVarContentType);
//
//        if(progressListener != null) {
//            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
//                @Override
//                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
//                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
//                    return originalResponse.newBuilder()
//                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
//                    .build();
//                }
//            });
//        }
//
//        String[] localVarAuthNames = new String[] {  };
//        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
//    }
//
//    @SuppressWarnings("rawtypes")
//    private com.squareup.okhttp.Call queryTradingPairsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
//
//
//        com.squareup.okhttp.Call call = queryTradingPairsCall(progressListener, progressRequestListener);
//        return call;
//
//    }
//
//    /**
//     * Query all trading-pair infos in blockchain
//     *
//     * @return InlineResponse20043
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public InlineResponse20043 queryTradingPairs() throws ApiException {
//        ApiResponse<InlineResponse20043> resp = queryTradingPairsWithHttpInfo();
//        return resp.getData();
//    }
//
//    /**
//     * Query all trading-pair infos in blockchain
//     *
//     * @return ApiResponse&lt;InlineResponse20043&gt;
//     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
//     */
//    public ApiResponse<InlineResponse20043> queryTradingPairsWithHttpInfo() throws ApiException {
//        com.squareup.okhttp.Call call = queryTradingPairsValidateBeforeCall(null, null);
//        Type localVarReturnType = new TypeToken<InlineResponse20043>(){}.getType();
//        return apiClient.execute(call, localVarReturnType);
//    }
//
//    /**
//     * Query all trading-pair infos in blockchain (asynchronously)
//     *
//     * @param callback The callback to be executed when the API call finishes
//     * @return The request call
//     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
//     */
//    public com.squareup.okhttp.Call queryTradingPairsAsync(final ApiCallback<InlineResponse20043> callback) throws ApiException {
//
//        ProgressResponseBody.ProgressListener progressListener = null;
//        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;
//
//        if (callback != null) {
//            progressListener = new ProgressResponseBody.ProgressListener() {
//                @Override
//                public void update(long bytesRead, long contentLength, boolean done) {
//                    callback.onDownloadProgress(bytesRead, contentLength, done);
//                }
//            };
//
//            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
//                @Override
//                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
//                    callback.onUploadProgress(bytesWritten, contentLength, done);
//                }
//            };
//        }
//
//        com.squareup.okhttp.Call call = queryTradingPairsValidateBeforeCall(progressListener, progressRequestListener);
//        Type localVarReturnType = new TypeToken<InlineResponse20043>(){}.getType();
//        apiClient.executeAsync(call, localVarReturnType, callback);
//        return call;
//    }
//}
