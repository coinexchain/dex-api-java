/*
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BroadcastTxCommitResult;
import io.swagger.client.model.StdTx;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DistributionApi {
    private ApiClient apiClient;

    public DistributionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DistributionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for donateToCommunityPool
     * @param body Amount of cet to donate (required)
     * @param accAddress Account address of the user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call donateToCommunityPoolCall(Object body, String accAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/distribution/{accAddress}/donates"
            .replaceAll("\\{" + "accAddress" + "\\}", apiClient.escapeString(accAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call donateToCommunityPoolValidateBeforeCall(Object body, String accAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling donateToCommunityPool(Async)");
        }
        // verify the required parameter 'accAddress' is set
        if (accAddress == null) {
            throw new ApiException("Missing the required parameter 'accAddress' when calling donateToCommunityPool(Async)");
        }
        
        com.squareup.okhttp.Call call = donateToCommunityPoolCall(body, accAddress, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Donate to the community pool
     * Donate some amount of cet to the community pool
     * @param body Amount of cet to donate (required)
     * @param accAddress Account address of the user (required)
     * @return StdTx
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StdTx donateToCommunityPool(Object body, String accAddress) throws ApiException {
        ApiResponse<StdTx> resp = donateToCommunityPoolWithHttpInfo(body, accAddress);
        return resp.getData();
    }

    /**
     * Donate to the community pool
     * Donate some amount of cet to the community pool
     * @param body Amount of cet to donate (required)
     * @param accAddress Account address of the user (required)
     * @return ApiResponse&lt;StdTx&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StdTx> donateToCommunityPoolWithHttpInfo(Object body, String accAddress) throws ApiException {
        com.squareup.okhttp.Call call = donateToCommunityPoolValidateBeforeCall(body, accAddress, null, null);
        Type localVarReturnType = new TypeToken<StdTx>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Donate to the community pool (asynchronously)
     * Donate some amount of cet to the community pool
     * @param body Amount of cet to donate (required)
     * @param accAddress Account address of the user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call donateToCommunityPoolAsync(Object body, String accAddress, final ApiCallback<StdTx> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = donateToCommunityPoolValidateBeforeCall(body, accAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StdTx>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllRewards
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllRewardsCall(String delegatorAddr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/distribution/delegators/{delegatorAddr}/rewards"
            .replaceAll("\\{" + "delegatorAddr" + "\\}", apiClient.escapeString(delegatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllRewardsValidateBeforeCall(String delegatorAddr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'delegatorAddr' is set
        if (delegatorAddr == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddr' when calling getAllRewards(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllRewardsCall(delegatorAddr, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the total rewards balance from all delegations
     * Get the sum of all the rewards earned by delegations by a single delegator
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getAllRewards(String delegatorAddr) throws ApiException {
        ApiResponse<Object> resp = getAllRewardsWithHttpInfo(delegatorAddr);
        return resp.getData();
    }

    /**
     * Get the total rewards balance from all delegations
     * Get the sum of all the rewards earned by delegations by a single delegator
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getAllRewardsWithHttpInfo(String delegatorAddr) throws ApiException {
        com.squareup.okhttp.Call call = getAllRewardsValidateBeforeCall(delegatorAddr, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the total rewards balance from all delegations (asynchronously)
     * Get the sum of all the rewards earned by delegations by a single delegator
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllRewardsAsync(String delegatorAddr, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllRewardsValidateBeforeCall(delegatorAddr, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCommunityPool
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommunityPoolCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/distribution/community_pool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommunityPoolValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getCommunityPoolCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Community pool parameters
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getCommunityPool() throws ApiException {
        ApiResponse<Object> resp = getCommunityPoolWithHttpInfo();
        return resp.getData();
    }

    /**
     * Community pool parameters
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getCommunityPoolWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCommunityPoolValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Community pool parameters (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommunityPoolAsync(final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommunityPoolValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDistributionInfo
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDistributionInfoCall(String validatorAddr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/distribution/validators/{validatorAddr}"
            .replaceAll("\\{" + "validatorAddr" + "\\}", apiClient.escapeString(validatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDistributionInfoValidateBeforeCall(String validatorAddr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'validatorAddr' is set
        if (validatorAddr == null) {
            throw new ApiException("Missing the required parameter 'validatorAddr' when calling getDistributionInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getDistributionInfoCall(validatorAddr, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Validator distribution information
     * Query the distribution information of a single validator
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getDistributionInfo(String validatorAddr) throws ApiException {
        ApiResponse<Object> resp = getDistributionInfoWithHttpInfo(validatorAddr);
        return resp.getData();
    }

    /**
     * Validator distribution information
     * Query the distribution information of a single validator
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getDistributionInfoWithHttpInfo(String validatorAddr) throws ApiException {
        com.squareup.okhttp.Call call = getDistributionInfoValidateBeforeCall(validatorAddr, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Validator distribution information (asynchronously)
     * Query the distribution information of a single validator
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDistributionInfoAsync(String validatorAddr, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDistributionInfoValidateBeforeCall(validatorAddr, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDistributionParams
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDistributionParamsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/distribution/parameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDistributionParamsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getDistributionParamsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fee distribution parameters
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getDistributionParams() throws ApiException {
        ApiResponse<Object> resp = getDistributionParamsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Fee distribution parameters
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getDistributionParamsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getDistributionParamsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fee distribution parameters (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDistributionParamsAsync(final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDistributionParamsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOutstandingRewards
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOutstandingRewardsCall(String validatorAddr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/distribution/validators/{validatorAddr}/outstanding_rewards"
            .replaceAll("\\{" + "validatorAddr" + "\\}", apiClient.escapeString(validatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOutstandingRewardsValidateBeforeCall(String validatorAddr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'validatorAddr' is set
        if (validatorAddr == null) {
            throw new ApiException("Missing the required parameter 'validatorAddr' when calling getOutstandingRewards(Async)");
        }
        
        com.squareup.okhttp.Call call = getOutstandingRewardsCall(validatorAddr, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fee distribution outstanding rewards of a single validator
     * 
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getOutstandingRewards(String validatorAddr) throws ApiException {
        ApiResponse<Object> resp = getOutstandingRewardsWithHttpInfo(validatorAddr);
        return resp.getData();
    }

    /**
     * Fee distribution outstanding rewards of a single validator
     * 
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getOutstandingRewardsWithHttpInfo(String validatorAddr) throws ApiException {
        com.squareup.okhttp.Call call = getOutstandingRewardsValidateBeforeCall(validatorAddr, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fee distribution outstanding rewards of a single validator (asynchronously)
     * 
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOutstandingRewardsAsync(String validatorAddr, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOutstandingRewardsValidateBeforeCall(validatorAddr, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRewardByValidator
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRewardByValidatorCall(String delegatorAddr, String validatorAddr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}"
            .replaceAll("\\{" + "delegatorAddr" + "\\}", apiClient.escapeString(delegatorAddr.toString()))
            .replaceAll("\\{" + "validatorAddr" + "\\}", apiClient.escapeString(validatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRewardByValidatorValidateBeforeCall(String delegatorAddr, String validatorAddr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'delegatorAddr' is set
        if (delegatorAddr == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddr' when calling getRewardByValidator(Async)");
        }
        // verify the required parameter 'validatorAddr' is set
        if (validatorAddr == null) {
            throw new ApiException("Missing the required parameter 'validatorAddr' when calling getRewardByValidator(Async)");
        }
        
        com.squareup.okhttp.Call call = getRewardByValidatorCall(delegatorAddr, validatorAddr, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query a delegation reward
     * Query a single delegation reward by a delegator
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getRewardByValidator(String delegatorAddr, String validatorAddr) throws ApiException {
        ApiResponse<Object> resp = getRewardByValidatorWithHttpInfo(delegatorAddr, validatorAddr);
        return resp.getData();
    }

    /**
     * Query a delegation reward
     * Query a single delegation reward by a delegator
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getRewardByValidatorWithHttpInfo(String delegatorAddr, String validatorAddr) throws ApiException {
        com.squareup.okhttp.Call call = getRewardByValidatorValidateBeforeCall(delegatorAddr, validatorAddr, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query a delegation reward (asynchronously)
     * Query a single delegation reward by a delegator
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRewardByValidatorAsync(String delegatorAddr, String validatorAddr, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRewardByValidatorValidateBeforeCall(delegatorAddr, validatorAddr, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getValidatorRewards
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getValidatorRewardsCall(String validatorAddr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/distribution/validators/{validatorAddr}/rewards"
            .replaceAll("\\{" + "validatorAddr" + "\\}", apiClient.escapeString(validatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getValidatorRewardsValidateBeforeCall(String validatorAddr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'validatorAddr' is set
        if (validatorAddr == null) {
            throw new ApiException("Missing the required parameter 'validatorAddr' when calling getValidatorRewards(Async)");
        }
        
        com.squareup.okhttp.Call call = getValidatorRewardsCall(validatorAddr, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Commission and self-delegation rewards of a single validator
     * Query the commission and self-delegation rewards of validator.
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getValidatorRewards(String validatorAddr) throws ApiException {
        ApiResponse<Object> resp = getValidatorRewardsWithHttpInfo(validatorAddr);
        return resp.getData();
    }

    /**
     * Commission and self-delegation rewards of a single validator
     * Query the commission and self-delegation rewards of validator.
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getValidatorRewardsWithHttpInfo(String validatorAddr) throws ApiException {
        com.squareup.okhttp.Call call = getValidatorRewardsValidateBeforeCall(validatorAddr, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Commission and self-delegation rewards of a single validator (asynchronously)
     * Query the commission and self-delegation rewards of validator.
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getValidatorRewardsAsync(String validatorAddr, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getValidatorRewardsValidateBeforeCall(validatorAddr, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWithdrawAddress
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWithdrawAddressCall(String delegatorAddr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/distribution/delegators/{delegatorAddr}/withdraw_address"
            .replaceAll("\\{" + "delegatorAddr" + "\\}", apiClient.escapeString(delegatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWithdrawAddressValidateBeforeCall(String delegatorAddr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'delegatorAddr' is set
        if (delegatorAddr == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddr' when calling getWithdrawAddress(Async)");
        }
        
        com.squareup.okhttp.Call call = getWithdrawAddressCall(delegatorAddr, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the rewards withdrawal address
     * Get the delegations&#x27; rewards withdrawal address. This is the address in which the user will receive the reward funds
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getWithdrawAddress(String delegatorAddr) throws ApiException {
        ApiResponse<Object> resp = getWithdrawAddressWithHttpInfo(delegatorAddr);
        return resp.getData();
    }

    /**
     * Get the rewards withdrawal address
     * Get the delegations&#x27; rewards withdrawal address. This is the address in which the user will receive the reward funds
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getWithdrawAddressWithHttpInfo(String delegatorAddr) throws ApiException {
        com.squareup.okhttp.Call call = getWithdrawAddressValidateBeforeCall(delegatorAddr, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the rewards withdrawal address (asynchronously)
     * Get the delegations&#x27; rewards withdrawal address. This is the address in which the user will receive the reward funds
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWithdrawAddressAsync(String delegatorAddr, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWithdrawAddressValidateBeforeCall(delegatorAddr, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setWithdrawAddress
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setWithdrawAddressCall(String delegatorAddr, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/distribution/delegators/{delegatorAddr}/withdraw_address"
            .replaceAll("\\{" + "delegatorAddr" + "\\}", apiClient.escapeString(delegatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setWithdrawAddressValidateBeforeCall(String delegatorAddr, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'delegatorAddr' is set
        if (delegatorAddr == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddr' when calling setWithdrawAddress(Async)");
        }
        
        com.squareup.okhttp.Call call = setWithdrawAddressCall(delegatorAddr, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Replace the rewards withdrawal address
     * Replace the delegations&#x27; rewards withdrawal address for a new one.
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param body  (optional)
     * @return BroadcastTxCommitResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BroadcastTxCommitResult setWithdrawAddress(String delegatorAddr, Object body) throws ApiException {
        ApiResponse<BroadcastTxCommitResult> resp = setWithdrawAddressWithHttpInfo(delegatorAddr, body);
        return resp.getData();
    }

    /**
     * Replace the rewards withdrawal address
     * Replace the delegations&#x27; rewards withdrawal address for a new one.
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param body  (optional)
     * @return ApiResponse&lt;BroadcastTxCommitResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BroadcastTxCommitResult> setWithdrawAddressWithHttpInfo(String delegatorAddr, Object body) throws ApiException {
        com.squareup.okhttp.Call call = setWithdrawAddressValidateBeforeCall(delegatorAddr, body, null, null);
        Type localVarReturnType = new TypeToken<BroadcastTxCommitResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace the rewards withdrawal address (asynchronously)
     * Replace the delegations&#x27; rewards withdrawal address for a new one.
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setWithdrawAddressAsync(String delegatorAddr, Object body, final ApiCallback<BroadcastTxCommitResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setWithdrawAddressValidateBeforeCall(delegatorAddr, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BroadcastTxCommitResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for withdrawAllRewards
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call withdrawAllRewardsCall(String delegatorAddr, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/distribution/delegators/{delegatorAddr}/rewards"
            .replaceAll("\\{" + "delegatorAddr" + "\\}", apiClient.escapeString(delegatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call withdrawAllRewardsValidateBeforeCall(String delegatorAddr, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'delegatorAddr' is set
        if (delegatorAddr == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddr' when calling withdrawAllRewards(Async)");
        }
        
        com.squareup.okhttp.Call call = withdrawAllRewardsCall(delegatorAddr, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Withdraw all the delegator&#x27;s delegation rewards
     * Withdraw all the delegator&#x27;s delegation rewards
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param body  (optional)
     * @return BroadcastTxCommitResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BroadcastTxCommitResult withdrawAllRewards(String delegatorAddr, Object body) throws ApiException {
        ApiResponse<BroadcastTxCommitResult> resp = withdrawAllRewardsWithHttpInfo(delegatorAddr, body);
        return resp.getData();
    }

    /**
     * Withdraw all the delegator&#x27;s delegation rewards
     * Withdraw all the delegator&#x27;s delegation rewards
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param body  (optional)
     * @return ApiResponse&lt;BroadcastTxCommitResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BroadcastTxCommitResult> withdrawAllRewardsWithHttpInfo(String delegatorAddr, Object body) throws ApiException {
        com.squareup.okhttp.Call call = withdrawAllRewardsValidateBeforeCall(delegatorAddr, body, null, null);
        Type localVarReturnType = new TypeToken<BroadcastTxCommitResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Withdraw all the delegator&#x27;s delegation rewards (asynchronously)
     * Withdraw all the delegator&#x27;s delegation rewards
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call withdrawAllRewardsAsync(String delegatorAddr, Object body, final ApiCallback<BroadcastTxCommitResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = withdrawAllRewardsValidateBeforeCall(delegatorAddr, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BroadcastTxCommitResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for withdrawAllValidatorRewards
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call withdrawAllValidatorRewardsCall(String validatorAddr, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/distribution/validators/{validatorAddr}/rewards"
            .replaceAll("\\{" + "validatorAddr" + "\\}", apiClient.escapeString(validatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call withdrawAllValidatorRewardsValidateBeforeCall(String validatorAddr, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'validatorAddr' is set
        if (validatorAddr == null) {
            throw new ApiException("Missing the required parameter 'validatorAddr' when calling withdrawAllValidatorRewards(Async)");
        }
        
        com.squareup.okhttp.Call call = withdrawAllValidatorRewardsCall(validatorAddr, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Withdraw the validator&#x27;s rewards
     * Withdraw the validator&#x27;s self-delegation and commissions rewards
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param body  (optional)
     * @return BroadcastTxCommitResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BroadcastTxCommitResult withdrawAllValidatorRewards(String validatorAddr, Object body) throws ApiException {
        ApiResponse<BroadcastTxCommitResult> resp = withdrawAllValidatorRewardsWithHttpInfo(validatorAddr, body);
        return resp.getData();
    }

    /**
     * Withdraw the validator&#x27;s rewards
     * Withdraw the validator&#x27;s self-delegation and commissions rewards
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param body  (optional)
     * @return ApiResponse&lt;BroadcastTxCommitResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BroadcastTxCommitResult> withdrawAllValidatorRewardsWithHttpInfo(String validatorAddr, Object body) throws ApiException {
        com.squareup.okhttp.Call call = withdrawAllValidatorRewardsValidateBeforeCall(validatorAddr, body, null, null);
        Type localVarReturnType = new TypeToken<BroadcastTxCommitResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Withdraw the validator&#x27;s rewards (asynchronously)
     * Withdraw the validator&#x27;s self-delegation and commissions rewards
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call withdrawAllValidatorRewardsAsync(String validatorAddr, Object body, final ApiCallback<BroadcastTxCommitResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = withdrawAllValidatorRewardsValidateBeforeCall(validatorAddr, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BroadcastTxCommitResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for withdrawRewardsByValidator
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call withdrawRewardsByValidatorCall(String delegatorAddr, String validatorAddr, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}"
            .replaceAll("\\{" + "delegatorAddr" + "\\}", apiClient.escapeString(delegatorAddr.toString()))
            .replaceAll("\\{" + "validatorAddr" + "\\}", apiClient.escapeString(validatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call withdrawRewardsByValidatorValidateBeforeCall(String delegatorAddr, String validatorAddr, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'delegatorAddr' is set
        if (delegatorAddr == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddr' when calling withdrawRewardsByValidator(Async)");
        }
        // verify the required parameter 'validatorAddr' is set
        if (validatorAddr == null) {
            throw new ApiException("Missing the required parameter 'validatorAddr' when calling withdrawRewardsByValidator(Async)");
        }
        
        com.squareup.okhttp.Call call = withdrawRewardsByValidatorCall(delegatorAddr, validatorAddr, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Withdraw a delegation reward
     * Withdraw a delegator&#x27;s delegation reward from a single validator
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param body  (optional)
     * @return BroadcastTxCommitResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BroadcastTxCommitResult withdrawRewardsByValidator(String delegatorAddr, String validatorAddr, Object body) throws ApiException {
        ApiResponse<BroadcastTxCommitResult> resp = withdrawRewardsByValidatorWithHttpInfo(delegatorAddr, validatorAddr, body);
        return resp.getData();
    }

    /**
     * Withdraw a delegation reward
     * Withdraw a delegator&#x27;s delegation reward from a single validator
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param body  (optional)
     * @return ApiResponse&lt;BroadcastTxCommitResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BroadcastTxCommitResult> withdrawRewardsByValidatorWithHttpInfo(String delegatorAddr, String validatorAddr, Object body) throws ApiException {
        com.squareup.okhttp.Call call = withdrawRewardsByValidatorValidateBeforeCall(delegatorAddr, validatorAddr, body, null, null);
        Type localVarReturnType = new TypeToken<BroadcastTxCommitResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Withdraw a delegation reward (asynchronously)
     * Withdraw a delegator&#x27;s delegation reward from a single validator
     * @param delegatorAddr Bech32 AccAddress of Delegator (required)
     * @param validatorAddr Bech32 OperatorAddress of validator (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call withdrawRewardsByValidatorAsync(String delegatorAddr, String validatorAddr, Object body, final ApiCallback<BroadcastTxCommitResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = withdrawRewardsByValidatorValidateBeforeCall(delegatorAddr, validatorAddr, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BroadcastTxCommitResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
