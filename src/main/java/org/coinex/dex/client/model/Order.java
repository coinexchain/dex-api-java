/*
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.coinex.dex.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

/**
 * Order
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-27T01:19:45.029Z")
public class Order {
  @SerializedName("order_type")
  private Integer orderType = null;

  @SerializedName("trading_pair")
  private String tradingPair = null;

  @SerializedName("price_precision")
  private String pricePrecision = null;

  @SerializedName("price")
  private String price = null;

  @SerializedName("quantity")
  private String quantity = null;

  @SerializedName("side")
  private Integer side = null;

  @SerializedName("identify")
  private Integer identify = null;

  public Order orderType(Integer orderType) {
    this.orderType = orderType;
    return this;
  }

   /**
   * The identify of the price limit : 2; (Currently, only price limit orders are supported)
   * @return orderType
  **/
  @ApiModelProperty(example = "2", required = true, value = "The identify of the price limit : 2; (Currently, only price limit orders are supported)")
  public Integer getOrderType() {
    return orderType;
  }

  public void setOrderType(Integer orderType) {
    this.orderType = orderType;
  }

  public Order tradingPair(String tradingPair) {
    this.tradingPair = tradingPair;
    return this;
  }

   /**
   * Get tradingPair
   * @return tradingPair
  **/
  @ApiModelProperty(example = "abc/cet", required = true, value = "")
  public String getTradingPair() {
    return tradingPair;
  }

  public void setTradingPair(String tradingPair) {
    this.tradingPair = tradingPair;
  }

  public Order pricePrecision(String pricePrecision) {
    this.pricePrecision = pricePrecision;
    return this;
  }

   /**
   * Get pricePrecision
   * @return pricePrecision
  **/
  @ApiModelProperty(example = "9", value = "")
  public String getPricePrecision() {
    return pricePrecision;
  }

  public void setPricePrecision(String pricePrecision) {
    this.pricePrecision = pricePrecision;
  }

  public Order price(String price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @ApiModelProperty(example = "1000", required = true, value = "")
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }

  public Order quantity(String quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @ApiModelProperty(example = "12320", required = true, value = "")
  public String getQuantity() {
    return quantity;
  }

  public void setQuantity(String quantity) {
    this.quantity = quantity;
  }

  public Order side(Integer side) {
    this.side = side;
    return this;
  }

   /**
   * The buying or selling direction of an order.(buy : 1; sell : 2)
   * @return side
  **/
  @ApiModelProperty(example = "1", required = true, value = "The buying or selling direction of an order.(buy : 1; sell : 2)")
  public Integer getSide() {
    return side;
  }

  public void setSide(Integer side) {
    this.side = side;
  }

  public Order identify(Integer identify) {
    this.identify = identify;
    return this;
  }

   /**
   * A transaction can contain multiple order creation messages, the identify field was added to the order creation message to give each order a unique ID. So the order ID consists of user address, user sequence, identify.
   * @return identify
  **/
  @ApiModelProperty(example = "1", required = true, value = "A transaction can contain multiple order creation messages, the identify field was added to the order creation message to give each order a unique ID. So the order ID consists of user address, user sequence, identify.")
  public Integer getIdentify() {
    return identify;
  }

  public void setIdentify(Integer identify) {
    this.identify = identify;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.orderType, order.orderType) &&
        Objects.equals(this.tradingPair, order.tradingPair) &&
        Objects.equals(this.pricePrecision, order.pricePrecision) &&
        Objects.equals(this.price, order.price) &&
        Objects.equals(this.quantity, order.quantity) &&
        Objects.equals(this.side, order.side) &&
        Objects.equals(this.identify, order.identify);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderType, tradingPair, pricePrecision, price, quantity, side, identify);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    tradingPair: ").append(toIndentedString(tradingPair)).append("\n");
    sb.append("    pricePrecision: ").append(toIndentedString(pricePrecision)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    identify: ").append(toIndentedString(identify)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

