/*
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.coinex.dex.client.api;

import org.coinex.dex.client.ApiException;
import org.coinex.dex.client.model.Addresses;
import org.coinex.dex.client.model.Amount1;
import org.coinex.dex.client.model.Amount2;
import org.coinex.dex.client.model.BaseReq;
import org.coinex.dex.client.model.BaseReq1;
import org.coinex.dex.client.model.Info;
import org.coinex.dex.client.model.InlineResponse20037;
import org.coinex.dex.client.model.InlineResponse20038;
import org.coinex.dex.client.model.InlineResponse20039;
import org.coinex.dex.client.model.InlineResponse20040;
import org.coinex.dex.client.model.InlineResponse20041;
import org.coinex.dex.client.model.IssueToken;
import org.coinex.dex.client.model.NewOwner;
import org.coinex.dex.client.model.StdTx;
import org.coinex.dex.client.model.Whitelist;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for AssetApi
 */
@Ignore
public class AssetApiTest {

    private final AssetApi api = new AssetApi();

    
    /**
     * Add forbid whitelist
     *
     * Add forbiddable token whitelist addr
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWhitelistTest() throws ApiException {
        String symbol = null;
        Whitelist whitelist = null;
        StdTx response = api.addWhitelist(symbol, whitelist);

        // TODO: test validations
    }
    
    /**
     * Burn token
     *
     * Burn burnable token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void burnTokenTest() throws ApiException {
        String symbol = null;
        Amount2 amount = null;
        StdTx response = api.burnToken(symbol, amount);

        // TODO: test validations
    }
    
    /**
     * Forbid address
     *
     * Add forbidden addresses
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void forbidAddrTest() throws ApiException {
        String symbol = null;
        Addresses addresses = null;
        StdTx response = api.forbidAddr(symbol, addresses);

        // TODO: test validations
    }
    
    /**
     * Forbid token
     *
     * Forbid forbiddable token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void forbidTokenTest() throws ApiException {
        String symbol = null;
        BaseReq baseReq = null;
        StdTx response = api.forbidToken(symbol, baseReq);

        // TODO: test validations
    }
    
    /**
     * Get the current asset parameters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssetParamsTest() throws ApiException {
        InlineResponse20037 response = api.getAssetParams();

        // TODO: test validations
    }
    
    /**
     * query forbidden addresses
     *
     * Get forbidden addresses with provided &#x60;symbol&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getForbiddenAddressesTest() throws ApiException {
        String symbol = null;
        InlineResponse20040 response = api.getForbiddenAddresses(symbol);

        // TODO: test validations
    }
    
    /**
     * List reserved symbols
     *
     * List all reserved symbols
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReservedSymbolsTest() throws ApiException {
        InlineResponse20041 response = api.getReservedSymbols();

        // TODO: test validations
    }
    
    /**
     * queryToken
     *
     * Get token with provided &#x60;symbol&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenTest() throws ApiException {
        String symbol = null;
        InlineResponse20039 response = api.getToken(symbol);

        // TODO: test validations
    }
    
    /**
     * List tokens
     *
     * List all existing tokens
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenListTest() throws ApiException {
        InlineResponse20038 response = api.getTokenList();

        // TODO: test validations
    }
    
    /**
     * queryWhitelist
     *
     * Get token whitelist with provided &#x60;symbol&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWhitelistTest() throws ApiException {
        String symbol = null;
        InlineResponse20040 response = api.getWhitelist(symbol);

        // TODO: test validations
    }
    
    /**
     * Issue token
     *
     * Issue a new Token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueTokenTest() throws ApiException {
        IssueToken tokenInfo = null;
        StdTx response = api.issueToken(tokenInfo);

        // TODO: test validations
    }
    
    /**
     * Mint token
     *
     * Mint mintable token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mintTokenTest() throws ApiException {
        String symbol = null;
        Amount1 amount = null;
        StdTx response = api.mintToken(symbol, amount);

        // TODO: test validations
    }
    
    /**
     * Modify token info
     *
     * Modify token info
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyTokenInfoTest() throws ApiException {
        String symbol = null;
        Info info = null;
        StdTx response = api.modifyTokenInfo(symbol, info);

        // TODO: test validations
    }
    
    /**
     * Remove forbid whitelist
     *
     * Remove forbiddable token whitelist addr
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeWhitelistTest() throws ApiException {
        String symbol = null;
        Whitelist whitelist = null;
        StdTx response = api.removeWhitelist(symbol, whitelist);

        // TODO: test validations
    }
    
    /**
     * Transfer ownership
     *
     * Transfer token owner ship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferOwnershipTest() throws ApiException {
        String symbol = null;
        NewOwner newOwner = null;
        StdTx response = api.transferOwnership(symbol, newOwner);

        // TODO: test validations
    }
    
    /**
     * UnForbid address
     *
     * Remove forbidden addresses
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unForbidAddrTest() throws ApiException {
        String symbol = null;
        Addresses addresses = null;
        StdTx response = api.unForbidAddr(symbol, addresses);

        // TODO: test validations
    }
    
    /**
     * UnForbid token
     *
     * UnForbid forbiddable token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unFrobidTokenTest() throws ApiException {
        String symbol = null;
        BaseReq1 baseReq = null;
        StdTx response = api.unFrobidToken(symbol, baseReq);

        // TODO: test validations
    }
    
}
