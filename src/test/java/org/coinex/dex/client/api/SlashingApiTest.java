/*
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.coinex.dex.client.api;

import org.coinex.dex.client.ApiException;
import org.coinex.dex.client.model.BroadcastTxCommitResult;
import org.coinex.dex.client.model.InlineResponse20015;
import org.coinex.dex.client.model.InlineResponse20016;
import org.coinex.dex.client.model.InlineResponse20017;
import org.coinex.dex.client.model.UnjailBody;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for SlashingApi
 */
@Ignore
public class SlashingApiTest {

    private final SlashingApi api = new SlashingApi();

    
    /**
     * Get sign info of given validator
     *
     * Get sign info of given validator
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSigningInfoTest() throws ApiException {
        String validatorPubKey = null;
        InlineResponse20015 response = api.getSigningInfo(validatorPubKey);

        // TODO: test validations
    }
    
    /**
     * Get sign info of given all validators
     *
     * Get sign info of all validators
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSigningInfosTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        InlineResponse20016 response = api.getSigningInfos(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get the current slashing parameters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlashingParamsTest() throws ApiException {
        InlineResponse20017 response = api.getSlashingParams();

        // TODO: test validations
    }
    
    /**
     * Unjail a jailed validator
     *
     * Send transaction to unjail a jailed validator
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unjailValidatorTest() throws ApiException {
        String validatorAddr = null;
        UnjailBody unjailBody = null;
        BroadcastTxCommitResult response = api.unjailValidator(validatorAddr, unjailBody);

        // TODO: test validations
    }
    
}
