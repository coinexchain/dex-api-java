/*
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BroadcastTxCommitResult;
import io.swagger.client.model.PaginatedQueryTxs;
import io.swagger.client.model.StdTx;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StakingApi
 */
@Ignore
public class StakingApiTest {

    private final StakingApi api = new StakingApi();

    /**
     * Get all delegations from a delegator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDelegationsTest() throws ApiException {
        String delegatorAddr = null;
        Object response = api.getDelegations(delegatorAddr);

        // TODO: test validations
    }
    /**
     * Get all delegations from a validator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDelegationsOfValidatorTest() throws ApiException {
        String validatorAddr = null;
        Object response = api.getDelegationsOfValidator(validatorAddr);

        // TODO: test validations
    }
    /**
     * Query the current delegation between a delegator and a validator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDelegationsToValidatorTest() throws ApiException {
        String delegatorAddr = null;
        String validatorAddr = null;
        Object response = api.getDelegationsToValidator(delegatorAddr, validatorAddr);

        // TODO: test validations
    }
    /**
     * Get all staking txs (i.e msgs) from a delegator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDelegatorTxsTest() throws ApiException {
        String delegatorAddr = null;
        List<PaginatedQueryTxs> response = api.getDelegatorTxs(delegatorAddr);

        // TODO: test validations
    }
    /**
     * Get all redelegations (filter by query params)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRedelegationsTest() throws ApiException {
        String delegator = null;
        String validatorFrom = null;
        String validatorTo = null;
        Object response = api.getRedelegations(delegator, validatorFrom, validatorTo);

        // TODO: test validations
    }
    /**
     * Get the current staking parameter values
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStakingParametersTest() throws ApiException {
        Object response = api.getStakingParameters();

        // TODO: test validations
    }
    /**
     * Get the current state of the staking pool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStakingPoolTest() throws ApiException {
        Object response = api.getStakingPool();

        // TODO: test validations
    }
    /**
     * Query all unbonding delegations between a delegator and a validator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUndelegationsBetweenTest() throws ApiException {
        String delegatorAddr = null;
        String validatorAddr = null;
        Object response = api.getUndelegationsBetween(delegatorAddr, validatorAddr);

        // TODO: test validations
    }
    /**
     * Get all unbonding delegations from a delegator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUndelegationsOfDelegatorTest() throws ApiException {
        String delegatorAddr = null;
        Object response = api.getUndelegationsOfDelegator(delegatorAddr);

        // TODO: test validations
    }
    /**
     * Get all unbonding delegations from a validator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUndelegationsOfValidatorTest() throws ApiException {
        String validatorAddr = null;
        Object response = api.getUndelegationsOfValidator(validatorAddr);

        // TODO: test validations
    }
    /**
     * Query the information from a single validator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getValidatorTest() throws ApiException {
        String validatorAddr = null;
        Object response = api.getValidator(validatorAddr);

        // TODO: test validations
    }
    /**
     * Query a validator that a delegator is bonded to
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getValidatorOfDelegatorTest() throws ApiException {
        String delegatorAddr = null;
        String validatorAddr = null;
        Object response = api.getValidatorOfDelegator(delegatorAddr, validatorAddr);

        // TODO: test validations
    }
    /**
     * Get all validator candidates. By default it returns only the bonded validators.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getValidatorsTest() throws ApiException {
        String status = null;
        Integer page = null;
        Integer limit = null;
        Object response = api.getValidators(status, page, limit);

        // TODO: test validations
    }
    /**
     * Query all validators that a delegator is bonded to
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getValidatorsOfDelegatorTest() throws ApiException {
        String delegatorAddr = null;
        Object response = api.getValidatorsOfDelegator(delegatorAddr);

        // TODO: test validations
    }
    /**
     * Submit delegation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitDelegationTest() throws ApiException {
        String delegatorAddr = null;
        Object body = null;
        BroadcastTxCommitResult response = api.submitDelegation(delegatorAddr, body);

        // TODO: test validations
    }
    /**
     * Submit a redelegation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitRedelegationTest() throws ApiException {
        String delegatorAddr = null;
        Object body = null;
        StdTx response = api.submitRedelegation(delegatorAddr, body);

        // TODO: test validations
    }
    /**
     * Submit an unbonding delegation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void undelegateTest() throws ApiException {
        String delegatorAddr = null;
        Object body = null;
        BroadcastTxCommitResult response = api.undelegate(delegatorAddr, body);

        // TODO: test validations
    }
}
