/*
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BroadcastTxCommitResult;
import io.swagger.client.model.InlineResponse20018;
import io.swagger.client.model.InlineResponse20019;
import io.swagger.client.model.InlineResponse20020;
import io.swagger.client.model.InlineResponse20021;
import io.swagger.client.model.InlineResponse20022;
import io.swagger.client.model.InlineResponse20023;
import io.swagger.client.model.InlineResponse20024;
import io.swagger.client.model.InlineResponse20025;
import io.swagger.client.model.InlineResponse20026;
import io.swagger.client.model.InlineResponse20027;
import io.swagger.client.model.InlineResponse20028;
import io.swagger.client.model.PostDepositBody;
import io.swagger.client.model.PostProposalBody;
import io.swagger.client.model.PostProposalBody1;
import io.swagger.client.model.PostProposalBody2;
import io.swagger.client.model.PostVoteBody;
import io.swagger.client.model.StdTx;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GovernanceApi
 */
@Ignore
public class GovernanceApiTest {

    private final GovernanceApi api = new GovernanceApi();

    
    /**
     * Deposit tokens to a proposal
     *
     * Send transaction to deposit tokens to a proposal
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void depositToProposalTest() throws ApiException {
        String proposalId = null;
        PostDepositBody postDepositBody = null;
        BroadcastTxCommitResult response = api.depositToProposal(proposalId, postDepositBody);

        // TODO: test validations
    }
    
    /**
     * Query deposit
     *
     * Query deposit by proposalId and depositor address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDepositByAddrTest() throws ApiException {
        String proposalId = null;
        String depositor = null;
        InlineResponse20022 response = api.getDepositByAddr(proposalId, depositor);

        // TODO: test validations
    }
    
    /**
     * Query governance deposit parameters
     *
     * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDepositParametersTest() throws ApiException {
        InlineResponse20026 response = api.getDepositParameters();

        // TODO: test validations
    }
    
    /**
     * Query deposits
     *
     * Query deposits by proposalId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDepositsTest() throws ApiException {
        String proposalId = null;
        InlineResponse20021 response = api.getDeposits(proposalId);

        // TODO: test validations
    }
    
    /**
     * Query a proposal
     *
     * Query a proposal by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProposalByIDTest() throws ApiException {
        String proposalId = null;
        InlineResponse20019 response = api.getProposalByID(proposalId);

        // TODO: test validations
    }
    
    /**
     * Query proposals
     *
     * Query proposals information with parameters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProposalsTest() throws ApiException {
        String voter = null;
        String depositor = null;
        String status = null;
        InlineResponse20018 response = api.getProposals(voter, depositor, status);

        // TODO: test validations
    }
    
    /**
     * Query proposer
     *
     * Query for the proposer for a proposal
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProposerTest() throws ApiException {
        String proposalId = null;
        InlineResponse20020 response = api.getProposer(proposalId);

        // TODO: test validations
    }
    
    /**
     * Get a proposal&#39;s tally result at the current time
     *
     * Gets a proposal&#39;s tally result at the current time. If the proposal is pending deposits (i.e status &#39;DepositPeriod&#39;) it returns an empty tally result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTallyTest() throws ApiException {
        String proposalId = null;
        InlineResponse20025 response = api.getTally(proposalId);

        // TODO: test validations
    }
    
    /**
     * Query governance tally parameters
     *
     * Query governance tally parameters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTallyingParametersTest() throws ApiException {
        InlineResponse20027 response = api.getTallyingParameters();

        // TODO: test validations
    }
    
    /**
     * Query vote
     *
     * Query vote information by proposal Id and voter address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVoterByAddrTest() throws ApiException {
        String proposalId = null;
        String voter = null;
        InlineResponse20024 response = api.getVoterByAddr(proposalId, voter);

        // TODO: test validations
    }
    
    /**
     * Query voters
     *
     * Query voters information by proposalId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVotersTest() throws ApiException {
        String proposalId = null;
        InlineResponse20023 response = api.getVoters(proposalId);

        // TODO: test validations
    }
    
    /**
     * Query governance voting parameters
     *
     * Query governance voting parameters. The voting_period units are in nanoseconds.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVotingParametersTest() throws ApiException {
        InlineResponse20028 response = api.getVotingParameters();

        // TODO: test validations
    }
    
    /**
     * Generate a community pool spend proposal transaction
     *
     * Generate a community pool spend proposal transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitCommunityPoolSpendProposalTest() throws ApiException {
        PostProposalBody2 postProposalBody = null;
        StdTx response = api.submitCommunityPoolSpendProposal(postProposalBody);

        // TODO: test validations
    }
    
    /**
     * Generate a parameter change proposal transaction
     *
     * Generate a parameter change proposal transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitParameterChangeProposalTest() throws ApiException {
        PostProposalBody1 postProposalBody = null;
        StdTx response = api.submitParameterChangeProposal(postProposalBody);

        // TODO: test validations
    }
    
    /**
     * Submit a proposal
     *
     * Send transaction to submit a proposal
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitProposalTest() throws ApiException {
        PostProposalBody postProposalBody = null;
        StdTx response = api.submitProposal(postProposalBody);

        // TODO: test validations
    }
    
    /**
     * Vote a proposal
     *
     * Send transaction to vote a proposal
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voteProposalTest() throws ApiException {
        String proposalId = null;
        PostVoteBody postVoteBody = null;
        BroadcastTxCommitResult response = api.voteProposal(proposalId, postVoteBody);

        // TODO: test validations
    }
    
}
